// Code generated by mockery v2.49.0. DO NOT EDIT.

package mocks

import (
	context "context"

	common "github.com/edgexfoundry/go-mod-core-contracts/v4/dtos/common"

	errors "github.com/edgexfoundry/go-mod-core-contracts/v4/errors"

	mock "github.com/stretchr/testify/mock"

	requests "github.com/IOTechSystems/go-mod-central-ext/v4/pkg/dtos/requests"

	responses "github.com/IOTechSystems/go-mod-central-ext/v4/pkg/dtos/responses"
)

// UserClient is an autogenerated mock type for the UserClient type
type UserClient struct {
	mock.Mock
}

// Add provides a mock function with given fields: ctx, reqs
func (_m *UserClient) Add(ctx context.Context, reqs []requests.AddUserRequest) ([]common.BaseWithIdResponse, errors.EdgeX) {
	ret := _m.Called(ctx, reqs)

	if len(ret) == 0 {
		panic("no return value specified for Add")
	}

	var r0 []common.BaseWithIdResponse
	var r1 errors.EdgeX
	if rf, ok := ret.Get(0).(func(context.Context, []requests.AddUserRequest) ([]common.BaseWithIdResponse, errors.EdgeX)); ok {
		return rf(ctx, reqs)
	}
	if rf, ok := ret.Get(0).(func(context.Context, []requests.AddUserRequest) []common.BaseWithIdResponse); ok {
		r0 = rf(ctx, reqs)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]common.BaseWithIdResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, []requests.AddUserRequest) errors.EdgeX); ok {
		r1 = rf(ctx, reqs)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(errors.EdgeX)
		}
	}

	return r0, r1
}

// AllUsers provides a mock function with given fields: ctx, offset, limit
func (_m *UserClient) AllUsers(ctx context.Context, offset int, limit int) (responses.MultiUsersResponse, errors.EdgeX) {
	ret := _m.Called(ctx, offset, limit)

	if len(ret) == 0 {
		panic("no return value specified for AllUsers")
	}

	var r0 responses.MultiUsersResponse
	var r1 errors.EdgeX
	if rf, ok := ret.Get(0).(func(context.Context, int, int) (responses.MultiUsersResponse, errors.EdgeX)); ok {
		return rf(ctx, offset, limit)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int, int) responses.MultiUsersResponse); ok {
		r0 = rf(ctx, offset, limit)
	} else {
		r0 = ret.Get(0).(responses.MultiUsersResponse)
	}

	if rf, ok := ret.Get(1).(func(context.Context, int, int) errors.EdgeX); ok {
		r1 = rf(ctx, offset, limit)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(errors.EdgeX)
		}
	}

	return r0, r1
}

// AuthRoutes provides a mock function with given fields: ctx, headers, reqs
func (_m *UserClient) AuthRoutes(ctx context.Context, headers map[string]string, reqs []requests.AuthRouteRequest) (responses.AuthRouteResponse, errors.EdgeX) {
	ret := _m.Called(ctx, headers, reqs)

	if len(ret) == 0 {
		panic("no return value specified for AuthRoutes")
	}

	var r0 responses.AuthRouteResponse
	var r1 errors.EdgeX
	if rf, ok := ret.Get(0).(func(context.Context, map[string]string, []requests.AuthRouteRequest) (responses.AuthRouteResponse, errors.EdgeX)); ok {
		return rf(ctx, headers, reqs)
	}
	if rf, ok := ret.Get(0).(func(context.Context, map[string]string, []requests.AuthRouteRequest) responses.AuthRouteResponse); ok {
		r0 = rf(ctx, headers, reqs)
	} else {
		r0 = ret.Get(0).(responses.AuthRouteResponse)
	}

	if rf, ok := ret.Get(1).(func(context.Context, map[string]string, []requests.AuthRouteRequest) errors.EdgeX); ok {
		r1 = rf(ctx, headers, reqs)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(errors.EdgeX)
		}
	}

	return r0, r1
}

// Authenticate provides a mock function with given fields: ctx, headers
func (_m *UserClient) Authenticate(ctx context.Context, headers map[string]string) (interface{}, errors.EdgeX) {
	ret := _m.Called(ctx, headers)

	if len(ret) == 0 {
		panic("no return value specified for Authenticate")
	}

	var r0 interface{}
	var r1 errors.EdgeX
	if rf, ok := ret.Get(0).(func(context.Context, map[string]string) (interface{}, errors.EdgeX)); ok {
		return rf(ctx, headers)
	}
	if rf, ok := ret.Get(0).(func(context.Context, map[string]string) interface{}); ok {
		r0 = rf(ctx, headers)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(interface{})
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, map[string]string) errors.EdgeX); ok {
		r1 = rf(ctx, headers)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(errors.EdgeX)
		}
	}

	return r0, r1
}

// DeleteUserByName provides a mock function with given fields: ctx, name
func (_m *UserClient) DeleteUserByName(ctx context.Context, name string) (common.BaseResponse, errors.EdgeX) {
	ret := _m.Called(ctx, name)

	if len(ret) == 0 {
		panic("no return value specified for DeleteUserByName")
	}

	var r0 common.BaseResponse
	var r1 errors.EdgeX
	if rf, ok := ret.Get(0).(func(context.Context, string) (common.BaseResponse, errors.EdgeX)); ok {
		return rf(ctx, name)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) common.BaseResponse); ok {
		r0 = rf(ctx, name)
	} else {
		r0 = ret.Get(0).(common.BaseResponse)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) errors.EdgeX); ok {
		r1 = rf(ctx, name)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(errors.EdgeX)
		}
	}

	return r0, r1
}

// Login provides a mock function with given fields: ctx, req
func (_m *UserClient) Login(ctx context.Context, req requests.LoginRequest) (responses.TokenResponse, errors.EdgeX) {
	ret := _m.Called(ctx, req)

	if len(ret) == 0 {
		panic("no return value specified for Login")
	}

	var r0 responses.TokenResponse
	var r1 errors.EdgeX
	if rf, ok := ret.Get(0).(func(context.Context, requests.LoginRequest) (responses.TokenResponse, errors.EdgeX)); ok {
		return rf(ctx, req)
	}
	if rf, ok := ret.Get(0).(func(context.Context, requests.LoginRequest) responses.TokenResponse); ok {
		r0 = rf(ctx, req)
	} else {
		r0 = ret.Get(0).(responses.TokenResponse)
	}

	if rf, ok := ret.Get(1).(func(context.Context, requests.LoginRequest) errors.EdgeX); ok {
		r1 = rf(ctx, req)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(errors.EdgeX)
		}
	}

	return r0, r1
}

// Update provides a mock function with given fields: ctx, reqs
func (_m *UserClient) Update(ctx context.Context, reqs []requests.UpdateUserRequest) ([]common.BaseResponse, errors.EdgeX) {
	ret := _m.Called(ctx, reqs)

	if len(ret) == 0 {
		panic("no return value specified for Update")
	}

	var r0 []common.BaseResponse
	var r1 errors.EdgeX
	if rf, ok := ret.Get(0).(func(context.Context, []requests.UpdateUserRequest) ([]common.BaseResponse, errors.EdgeX)); ok {
		return rf(ctx, reqs)
	}
	if rf, ok := ret.Get(0).(func(context.Context, []requests.UpdateUserRequest) []common.BaseResponse); ok {
		r0 = rf(ctx, reqs)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]common.BaseResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, []requests.UpdateUserRequest) errors.EdgeX); ok {
		r1 = rf(ctx, reqs)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(errors.EdgeX)
		}
	}

	return r0, r1
}

// UserByName provides a mock function with given fields: ctx, name
func (_m *UserClient) UserByName(ctx context.Context, name string) (responses.UserResponse, errors.EdgeX) {
	ret := _m.Called(ctx, name)

	if len(ret) == 0 {
		panic("no return value specified for UserByName")
	}

	var r0 responses.UserResponse
	var r1 errors.EdgeX
	if rf, ok := ret.Get(0).(func(context.Context, string) (responses.UserResponse, errors.EdgeX)); ok {
		return rf(ctx, name)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) responses.UserResponse); ok {
		r0 = rf(ctx, name)
	} else {
		r0 = ret.Get(0).(responses.UserResponse)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) errors.EdgeX); ok {
		r1 = rf(ctx, name)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(errors.EdgeX)
		}
	}

	return r0, r1
}

// NewUserClient creates a new instance of UserClient. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewUserClient(t interface {
	mock.TestingT
	Cleanup(func())
}) *UserClient {
	mock := &UserClient{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
