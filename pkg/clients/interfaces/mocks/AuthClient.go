// Code generated by mockery v2.49.0. DO NOT EDIT.

package mocks

import (
	context "context"

	errors "github.com/edgexfoundry/go-mod-core-contracts/v4/errors"

	mock "github.com/stretchr/testify/mock"

	requests "github.com/IOTechSystems/go-mod-central-ext/v4/pkg/dtos/requests"

	responses "github.com/IOTechSystems/go-mod-central-ext/v4/pkg/dtos/responses"
)

// AuthClient is an autogenerated mock type for the AuthClient type
type AuthClient struct {
	mock.Mock
}

// AuthRoutes provides a mock function with given fields: ctx, headers, reqs
func (_m *AuthClient) AuthRoutes(ctx context.Context, headers map[string]string, reqs []requests.AuthRouteRequest) (responses.AuthRouteResponse, errors.EdgeX) {
	ret := _m.Called(ctx, headers, reqs)

	if len(ret) == 0 {
		panic("no return value specified for AuthRoutes")
	}

	var r0 responses.AuthRouteResponse
	var r1 errors.EdgeX
	if rf, ok := ret.Get(0).(func(context.Context, map[string]string, []requests.AuthRouteRequest) (responses.AuthRouteResponse, errors.EdgeX)); ok {
		return rf(ctx, headers, reqs)
	}
	if rf, ok := ret.Get(0).(func(context.Context, map[string]string, []requests.AuthRouteRequest) responses.AuthRouteResponse); ok {
		r0 = rf(ctx, headers, reqs)
	} else {
		r0 = ret.Get(0).(responses.AuthRouteResponse)
	}

	if rf, ok := ret.Get(1).(func(context.Context, map[string]string, []requests.AuthRouteRequest) errors.EdgeX); ok {
		r1 = rf(ctx, headers, reqs)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(errors.EdgeX)
		}
	}

	return r0, r1
}

// Authenticate provides a mock function with given fields: ctx, headers
func (_m *AuthClient) Auth(ctx context.Context, headers map[string]string) (errors.EdgeX, string) {
	ret := _m.Called(ctx, headers)

	if len(ret) == 0 {
		panic("no return value specified for Auth")
	}

	var r0 errors.EdgeX
	var r1 string
	if rf, ok := ret.Get(0).(func(context.Context, map[string]string) (errors.EdgeX, string)); ok {
		return rf(ctx, headers)
	}
	if rf, ok := ret.Get(0).(func(context.Context, map[string]string) errors.EdgeX); ok {
		r0 = rf(ctx, headers)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(errors.EdgeX)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, map[string]string) string); ok {
		r1 = rf(ctx, headers)
	} else {
		r1 = ret.Get(1).(string)
	}

	return r0, r1
}

// NewAuthClient creates a new instance of AuthClient. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewAuthClient(t interface {
	mock.TestingT
	Cleanup(func())
}) *AuthClient {
	mock := &AuthClient{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
